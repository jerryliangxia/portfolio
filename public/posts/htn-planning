This form of video game AI was first introduced by [Transformers: Fall of Cybertron](https://www.youtube.com/watch?v=kXm467TFTcY) in 2012. For this project, a minotaur guarded a treasure while four adventurers attempted to steal it.

Using HTN's planning algorithm, the adventurers are
able to consistently assign tasks to themselves with knowledge of their surroundings. They are also able to backtrack and re-plan if they fail their current task. (More can be found about HTN planning [here](https://www.gameaipro.com/GameAIPro/GameAIPro_Chapter12_Exploring_HTN_Planners_through_Example.pdf).)

For the Minotaur, the reactive AI is quite straightforward. Its' order of priorities are:

- Attack the adventurer holding the treasure.
- Attack the adventurer attacking them.
- Attack the closest adventurer.

## Hierarchical Task Network

<img src="../images/htn-planning/0.png" width="100%" />

In HTN, there is a `Plan()` function that processes the world state, and breaks down composite tasks to a list of simple tasks. In this project, these composite tasks are `TakeDamage`, `ManageTreasure` and `AttackMinotaur`.

The first adventurer who spawns will be assigned `ManageTreasure`. All other adventurers distract the Minotaur (`AttackMinotaur`), which means throwing rocks from afar or swinging with their sword.

The Minotaur has a radius attack, meaning any adventurer in a radius `r` of the Minotaur takes damage. If an adventurer is within this radius, they fail their current task and immediately start a `TakeDamage` composite task. Once `TakeDamage` is completed, they backtrack to their original task.

The `BeAdventurer` tree is shown below:

```
BeAdventurer
|
|-- Method 0 (Navigate to Treasure)
|   |
|   |-- NavToTarget
|   |   |
|   |   |-- NavToTargetLocation (Takes in GameObject that can be either Treasure or Minotaur)
|   |   |
|   |   |-- NavToMinotaurLOS (Archers Go Where Minotaur in Line of Sight)
|   |
|   |-- PickUpTreasure
|   |
|   |-- MoveToSpawn
|
|-- Method 1 (Navigate to Minotaur)
|   |
|   |-- NavToTarget
|   |   |
|   |   |-- NavToTargetLocation (Takes in GameObject that can be either Treasure or Minotaur)
|   |   |
|   |   |-- NavToMinotaurLOS (Archers Go Where Minotaur in Line of Sight)
|   |
|   |-- DoAttack
|   |   |
|   |   |-- DoCloseRangeAttack (If Close-Combat Adventurer)
|   |   |
|   |   |-- DoFarRangeAttack (If Far-Range Adventurer)
|   |
|   |-- Recover
|
|-- Method 2 (Take Damage)
    |
    |-- TakeDamage
        |
        |-- Method 0
        |   |
        |   |-- TakeDamageToHealth
        |   |   |
        |   |   |-- Recover (Can still take n > 1 hits)
        |   |   |
        |   |   |-- Despawn (Can take n = 0 hits)
        |
        |-- Method 1
            |
            |-- DropTreasure
            |
            |-- TakeDamageToHealth
                |
                |-- Recover (Can still take n > 1 hits)
                |
                |-- Despawn (Can take n = 0 hits)
```

## Psuedocode

```csharp
Plan: <>
State: current world state
tasks.push(rootTask)
while(tasks != empty) {
	t = tasks.pop()
	if(t.composite) {
		m = t.findMethod(state)
		if(m != null) {
			saveState(t, plan, m)
			tasks.push(m.subtasks)
		} else {
			restoreSavedState() <- backtrack
		}
	} else {
		if(t.precondition(state)) {
			state = t.apply(state)
			plan.append(t)
		} else {
			restoreSavedState() <- backtrack
		}
	}
}
```

Here, there are a few important things to note:

- There is a `plan` stack that consists of all current plans. A replan is issued whenever this stack is empty, ensuring the adventurer always has something to do.
- The `saveState` and `restoreSavedState` functions allow the adventurer to backtrack to their original task in the case they are interrupted, i.e. `TakeDamage` is triggered.

To test backtracking, a `TakeDamageTest` class was implemented, which made the adventurer fail their current task whenever they were clieked. This is the sped-up footage (note the cursor):

<img src="../images/htn-planning/1.gif" width="100%" />

Adding multiple adventurers was fine as long as they spawned one after the other. A simple `Spawner` class did the trick. Soon there were multiple adventurers working together to distract a (currently motionless) Minotaur.

In the next footage, the following can be seen:

- If an adventurer doing `ManageTreasure` is assigned `TakeDamage`, another adventurer will assume the composite task of `ManageTreasure`.
- After recovering from the `TakeDamage` task, adventurers will continue their failed task (in this case, of picking up the treasure and bringing it to spawn).

<img src="../images/htn-planning/2.gif" width="100%" />

Movement was added to the Minotaur, along with its "radius attack".

<img src="../images/htn-planning/3.gif" width="100%" />

Health bars were added to better visualize the scene, along with adjusting the camera to a higher view. Here's a demo where the adventurers successfully obtain the treasure:

<img src="../images/htn-planning/4.gif" width="100%" />

And another where they fail their objective:

<img src="../images/htn-planning/5.gif" width="100%" />

Both of these clips shown were done after tuning severable variables involved with adventurer health, attack distance, and cooldown times. Here's the full list, defined in a `Constants.cs` file:

| Health of Adventurers      |        |
| :------------------------- | -----: |
| FarRangeAdventurerHealth   | 3 hits |
| CloseRangeAdventurerHealth | 7 hits |

| Timed Events             |      |
| :----------------------- | ---: |
| DropTreasureTime         | 0.0s |
| RecoverTime              | 1.0s |
| CloseRangeAttackCooldown | 1.0s |
| PickUpTreasureTime       | 1.0s |
| MinotaurAttackCooldown   | 3.5s |

| Attack Distance (arbitrary units) |      |
| :-------------------------------- | ---: |
| MinotaurDistanceToAttackTarget    |  1.5 |
| MinotaurAttackRadius              |  2.0 |
| CloseRangeDistanceToHitMinotaur   | 1.25 |
| FarRangeDistanceToHitMinotaur     |  5.0 |

After adding some simple fog and background objects, here's the final scene - a success scenario;

<img src="../images/htn-planning/6.gif" width="100%" />

and a failure scenario;

<img src="../images/htn-planning/7.gif" width="100%" />

Lastly, you can play the game [here](https://jerrylxia.itch.io/htn-planning-and-reactive-ai-demo) on itch.io. Controls are outlined in the description.

Thanks for reading!
