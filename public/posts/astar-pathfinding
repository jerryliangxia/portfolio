Today I made a project involving A\* pathfinding and dynamic obstacles. You can check out the full demo [here](https://jerrylxia.itch.io/pathfinding-demo) on itch.io.

<img src="../images/astar-pathfinding/final_init.png" width="100%"/>

The procedure of my algorithm is as follows:

- Disable colliders of the current object and the goal object, so the grid wonâ€™t detect them as obstacles.
- Create a grid.
- Compute A\* on this grid with a simple Euclidean distance heuristic.
- Enable the colliders.
- Move the current object one step; repeat.

The goal of this project was to assign humans (white capsules) to reach a goal and chairs (red capsules) to obstruct human movement.

For humans, the `target = green goal capsule`. For chairs, the `target = closest human`. For every iteration, I'd update the position of the chairs once, and then the humans four times so that they could outmaneuver the chairs. Additionally, once the chairs were in a certain radius of a human, they would stop, so that the human could successfully move to the goal in most cases.

Once a human made contact with a chair, the goal capsule would spawn in a random location elsewhere to continue the cycle. Every object was spawned in a random location to start.

After adjusting parameters such as speed and density, it was noticed that no matter the difference chairs tended to clump together in a group:

<img src="../images/astar-pathfinding/findclosest.gif" width="100%"/>

This could be nice for zombie-like shooter games, but I wanted the movement to be more complex. If I assigned a human to each chair, they would often form a wall that would be more difficult to surpass, along with other surprising results. To do this, I used a round-robin approach:

```csharp
if (!GetComponent<Spawner>().findClosest)
{
    for (var i = 0; i < _chairs.Length; i++)
    {
        var seekerIndex = i % _seekers.Length; // This will loop back to 0 when i >= _seekers.Length
        _chairs[i].GetComponent<Chair>().target = _seekers[seekerIndex];
    }
}
```

### Collecting data

To find the optimal difficulty for the humans and the performance, I tried changing chairs to a fixed amount of humans and vice versa. Through this, I found a ratio of 8:8 was most optimal for performance and pathfinding difficulty.

#### Keeping Chairs Constant (8), and Varying Number of Humans

| Chairs | Time (ms) | Time (ms) | Time (ms) | Time (ms) | Avg Time (ms) |
| :----: | :-------: | :-------: | :-------: | :-------: | :-----------: |
|   1    |    22     |    27     |    25     |    27     |     25.25     |
|   2    |    36     |    31     |    32     |    39     |     34.50     |
|   4    |    52     |    46     |    48     |    47     |     48.25     |
|   8    |    81     |    84     |    90     |    87     |     85.5      |
|   16   |    142    |    141    |    151    |    146    |      145      |
|   32   |    266    |    290    |    269    |    267    |      273      |

<img src="../images/astar-pathfinding/graph.png" width="100%"/>

As mentioned above, the chairs did move more strategically, giving the results you see below:

<img src="../images/astar-pathfinding/notfindclosest.gif" width="100%"/>

After adding an isometric camera, I had this final scene:

<img src="../images/astar-pathfinding/finalnotfindclosest.gif" width="100%"/>

That's it! This was a fun exploration that helped me understand how pathfinding works in games. Currently I'm working on a third-person shooter for a zombie game, and this type of pathfinding will make it possible to create more intelligent enemies.

Here's a sneak peek of what I have so far:

<img src="../images/astar-pathfinding/thirdpersonshooter.gif" width="100%"/>

Thanks for reading!
